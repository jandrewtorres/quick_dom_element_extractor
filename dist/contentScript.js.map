{"version":3,"file":"contentScript.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,iCAAiC,gDAAgD;AACjF,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW;AACnC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,4DAA4D,aAAa;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D;AACA;AACA;AACA;AACA,gBAAgB,gBAAgB;AAChC;AACA,E","sources":["webpack:///./contentScript.js"],"sourcesContent":["// Add event listener for element click\ndocument.addEventListener('click', (event) => {\n    const element = event.target;\n    const boundingBox = element.getBoundingClientRect();\n  \n    // Prepare the element information\n    const elementInfo = {\n      title: '',\n      boundingBox: JSON.stringify({\n        top: boundingBox.top,\n        left: boundingBox.left,\n        width: boundingBox.width,\n        height: boundingBox.height,\n      }),\n      location: JSON.stringify({\n        x: boundingBox.left + boundingBox.width / 2,\n        y: boundingBox.top + boundingBox.height / 2,\n      }),\n      selectors: {\n        css: getCssSelector(element),\n        xpath: getXpath(element),\n        // Add other relevant selectors (e.g., ID, class, etc.)\n      },\n      type: element.tagName,\n      // Add other relevant information\n    };\n  \n    // Send the element information to the extension\n    chrome.runtime.sendMessage({ action: 'elementClicked', element: elementInfo });\n  });\n  \n  // Get the CSS selector of an element\n  function getCssSelector(element) {\n    if (!(element instanceof Element)) return;\n    const path = [];\n    while (element.nodeType === Node.ELEMENT_NODE) {\n      let selector = element.nodeName.toLowerCase();\n      if (element.id) {\n        selector += `#${element.id}`;\n        path.unshift(selector);\n        break;\n      } else {\n        let sibling = element;\n        let siblingIndex = 1;\n        while ((sibling = sibling.previousElementSibling)) {\n          if (sibling.nodeName.toLowerCase() === selector) siblingIndex++;\n        }\n        if (siblingIndex !== 1) selector += `:nth-of-type(${siblingIndex})`;\n      }\n      path.unshift(selector);\n      element = element.parentNode;\n    }\n    return path.join(' > ');\n  }\n  \n  // Get the XPath of an element\n  function getXpath(element) {\n    if (!(element instanceof Element)) return;\n    const xpath = [];\n    while (element && element.nodeType === Node.ELEMENT_NODE) {\n      let selector = element.nodeName.toLowerCase();\n      if (element.id) {\n        selector += `[@id='${element.id}']`;\n        xpath.unshift(selector);\n        break;\n      } else {\n        let sibling = element;\n        let siblingIndex = 1;\n        while ((sibling = sibling.previousElementSibling)) {\n          if (sibling.nodeName.toLowerCase() === selector) siblingIndex++;\n        }\n        if (siblingIndex !== 1) selector += `[${siblingIndex}]`;\n      }\n      xpath.unshift(selector);\n      element = element.parentNode;\n    }\n    return `//${xpath.join('/')}`;\n  }\n  "],"names":[],"sourceRoot":""}