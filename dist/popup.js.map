{"version":3,"file":"popup.js","mappings":";;;;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA,YAAY;AACZ;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,E","sources":["webpack:///./popup.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    // Variables to store the captured elements\n    var capturedElements = [];\n\n    // Start button click event handler\n    var startButton = document.getElementById('start-button');\n    startButton.disabled = false;\n    startButton.addEventListener('click', function() {\n      // Enable the start button and disable the stop button\n      startButton.disabled = true;\n      stopButton.disabled = false;\n  \n      // Add event listener for element clicks\n      document.addEventListener('click', handleElementClick);\n    });\n  \n    // Stop button click event handler\n    var stopButton = document.getElementById('stop-button');\n    stopButton.disabled = true;\n    stopButton.addEventListener('click', function() {\n      // Disable the stop button and enable the start button\n      stopButton.disabled = true;\n      startButton.disabled = false;\n  \n      // Remove the event listener for element clicks\n      document.removeEventListener('click', handleElementClick);\n  \n      // Save the captured elements to a JSON file\n      saveDataToJSON(capturedElements);\n    });\n  \n    // Event handler for element clicks\n    function handleElementClick(event) {\n      event.preventDefault();\n      event.stopPropagation();\n  \n      // Get the target element and its details\n      var element = event.target;\n      var elementData = getElementData(element);\n  \n      // Add the element data to the captured elements array\n      capturedElements.push(elementData);\n  \n      // Create a new row in the table to display the element data\n      createTableRow(elementData);\n    }\n  \n    // Extract the relevant data for an element\n    function getElementData(element) {\n      var title = element.tagName.toLowerCase();\n      var boundingBox = element.getBoundingClientRect();\n      var center = {\n        x: boundingBox.left + boundingBox.width / 2,\n        y: boundingBox.top + boundingBox.height / 2\n      };\n      var selectors = {\n        css: getCSSSelector(element),\n        xpath: getXPathSelector(element)\n      };\n      var elementType = element.type || '';\n      var id = element.id || '';\n      var className = element.className || '';\n  \n      return {\n        title: title,\n        boundingBox: boundingBox,\n        center: center,\n        selectors: selectors,\n        elementType: elementType,\n        id: id,\n        className: className\n      };\n    }\n  \n    // Create a table row to display the element data\n    function createTableRow(elementData) {\n      var tableBody = document.getElementById('element-table');\n      var newRow = document.createElement('tr');\n  \n      // Create table cells for each data field\n      var titleCell = createTableCell(elementData.title, true);\n      var boundingBoxCell = createTableCell(JSON.stringify(elementData.boundingBox));\n      var centerCell = createTableCell(JSON.stringify(elementData.center));\n      var cssSelectorCell = createTableCell(elementData.selectors.css);\n      var xpathSelectorCell = createTableCell(elementData.selectors.xpath);\n      var elementTypeCell = createTableCell(elementData.elementType);\n      var idCell = createTableCell(elementData.id);\n      var classCell = createTableCell(elementData.className);\n  \n      // Append the table cells to the new row\n      newRow.appendChild(titleCell);\n      newRow.appendChild(boundingBoxCell);\n      newRow.appendChild(centerCell);\n      newRow.appendChild(cssSelectorCell);\n      newRow.appendChild(xpathSelectorCell);\n      newRow.appendChild(elementTypeCell);\n      newRow.appendChild(idCell);\n      newRow.appendChild(classCell);\n  \n      // Append the new row to the table body\n      tableBody.appendChild(newRow);\n    }\n  \n    // Create a table cell element with the provided text content\n    function createTableCell(content, editable = false) {\n      var cell = document.createElement('td');\n      if (editable) {\n        var input = document.createElement('input');\n        input.type = 'text';\n        input.value = content;\n        cell.appendChild(input);\n      } else {\n        cell.textContent = content;\n      }\n      return cell;\n    }\n  \n    // Save the captured elements to a JSON file\n    function saveDataToJSON(data) {\n      var json = JSON.stringify(data, null, 2);\n  \n      // Retrieve the user-specified folder and file name\n      var folderInput = document.getElementById('folder-input');\n      var filenameInput = document.getElementById('filename-input');\n      var folderPath = folderInput.value;\n      var filename = filenameInput.value || getCurrentURL() + '.json';\n  \n      // Create a blob from the JSON data\n      var blob = new Blob([json], { type: 'application/json' });\n  \n      // Generate a URL for the blob\n      var url = URL.createObjectURL(blob);\n  \n      // Create a link element to trigger the download\n      var link = document.createElement('a');\n      link.href = url;\n      link.download = filename;\n  \n      // Simulate a click on the link to start the download\n      link.click();\n  \n      // Clean up the URL object\n      URL.revokeObjectURL(url);\n  \n      // Clear the captured elements array and table\n      capturedElements = [];\n      clearTable();\n    }\n  \n    // Clear the table body\n    function clearTable() {\n      var tableBody = document.getElementById('table-body');\n      tableBody.innerHTML = '';\n    }\n  \n    // Get the current URL of the active tab\n    function getCurrentURL() {\n      return new Promise(function(resolve, reject) {\n        chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {\n          if (tabs && tabs.length > 0) {\n            resolve(tabs[0].url);\n          } else {\n            reject(new Error('Unable to retrieve the current URL.'));\n          }\n        });\n      });\n    }\n  \n    // Get the CSS selector for an element\n    function getCSSSelector(element) {\n      var path = [];\n      while (element.parentNode) {\n        if (element.id) {\n          path.unshift('#' + element.id);\n          break;\n        } else {\n          var elementTagName = element.tagName.toLowerCase();\n          var elementIndex = Array.from(element.parentNode.children).indexOf(element) + 1;\n          path.unshift(elementTagName + ':nth-child(' + elementIndex + ')');\n          element = element.parentNode;\n        }\n      }\n      return path.join(' > ');\n    }\n  \n    // Get the XPath selector for an element\n    function getXPathSelector(element) {\n      var path = [];\n      while (element && element.nodeType === Node.ELEMENT_NODE) {\n        var elementTagName = element.tagName.toLowerCase();\n        var elementIndex = getElementIndex(element);\n        path.unshift(elementTagName + '[' + elementIndex + ']');\n        element = element.parentNode;\n      }\n      return path.join('/');\n    }\n  \n    // Get the index of an element among its siblings\n    function getElementIndex(element) {\n      var index = 1;\n      while (element.previousElementSibling) {\n        element = element.previousElementSibling;\n        if (element.nodeType === Node.ELEMENT_NODE) {\n          index++;\n        }\n      }\n      return index;\n    }\n  });\n  "],"names":[],"sourceRoot":""}